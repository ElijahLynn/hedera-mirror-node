"""
Represents a Hedera account holder on the network.
"""
type Account implements Accountable & Entity & Node {
    alias: String
    allowances: Allowances!
    autoRenewAccount: Account
    autoRenewPeriod: Duration
    balance(format: CurrencyFormat = TINYBAR): Long
    createdTimestamp: Timestamp
    declineReward: Boolean!
    deleted: Boolean
    entityId: EntityId!
    expirationTimestamp: Timestamp
    id: ID!
    key: Object
    maxAutomaticTokenAssociations: Int
    memo: String!
    nfts(after: String, before: String, first: Int, last: Int): NftConnection!
    nonce: Long
    obtainer: Accountable
    pendingReward(format: CurrencyFormat = TINYBAR): Long
    receiverSigRequired: Boolean
    stakedAccount: Account
    stakedNode: NetworkNode
    stakePeriodStart: Timestamp
    timestamp: TimestampRange!
    tokens(after: String, before: String, first: Int, last: Int): TokenAccountConnection!
    transactions(after: String, before: String, first: Int, last: Int): TransactionConnection!
    type: EntityType!
}

"""
The unique identifier to find a specific account. Only one of the given fields can be present at a
time otherwise an error will occur.
"""
input AccountInput {

    "A RFC 4648 Base32, with the trailing '=' characters removed, string that represents an account alias."
    alias: String @Pattern(regexp: "^[A-Z2-7]+$")

    "The unique shard, realm, and number associated with a Hedera account."
    entityId: EntityIdInput

    "A hex-encoded string that represents a 20-byte EVM address."
    evmAddress: String @Pattern(regexp: "^(0x)?[a-fA-F0-9]{40}$")

    "An opaque, globally unique identifier specific to GraphQL."
    id: ID @Pattern(regexp: "^[a-zA-Z0-9+/=]+$")
}

"""
"""
interface Allowance {
    owner: Account!
    spender: Account!
    timestamp: TimestampRange!
}

"""
"""
type Allowances {
    crypto(after: String, before: String, first: Int, last: Int): CryptoAllowanceConnection!
    nft(after: String, before: String, first: Int, last: Int): NftAllowanceConnection!
    token(after: String, before: String, first: Int, last: Int): TokenAllowanceConnection!
}

"""
"""
type CryptoAllowance implements Allowance {
    amount: Long!
    owner: Account!
    spender: Account!
    timestamp: TimestampRange!
}

"""
The connection type for CryptoAllowance.
"""
type CryptoAllowanceConnection {
    """
    A list of edges.
    """
    edges: [CryptoAllowanceEdge!]!

    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CryptoAllowanceEdge {
    """
    The cursor associated with this edge.
    """
    cursor: String!

    """
    The item associated with the edge.
    """
    node: CryptoAllowance!
}

"""
"""
type NftAllowance implements Allowance {
    approvedForAll: Boolean!
    owner: Account!
    spender: Account!
    timestamp: TimestampRange!
    token: Token!
}

"""
The connection type for NftAllowance.
"""
type NftAllowanceConnection {
    """
    A list of edges.
    """
    edges: [NftAllowanceEdge!]!

    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type NftAllowanceEdge {
    """
    The cursor associated with this edge.
    """
    cursor: String!

    """
    The item associated with the edge.
    """
    node: NftAllowance!
}

"""
"""
type TokenAccount {
    automaticAssociation: Boolean!
    balance: Long!
    createdTimestamp: Timestamp!
    freezeStatus: FreezeStatus!
    kycStatus: KycStatus!
    timestamp: TimestampRange!
    token: Token!
}

"""
The connection type for TokenAccount.
"""
type TokenAccountConnection {
    """
    A list of edges.
    """
    edges: [TokenAccountEdge!]!

    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}
"""
An edge in a connection.
"""
type TokenAccountEdge {
    """
    The cursor associated with this edge.
    """
    cursor: String!

    """
    The item associated with the edge.
    """
    node: TokenAccount!
}

"""
"""
type TokenAllowance implements Allowance {
    amount: Long!
    owner: Account!
    spender: Account!
    timestamp: TimestampRange!
    token: Token!
}

"""
The connection type for TokenAllowance.
"""
type TokenAllowanceConnection {
    """
    A list of edges.
    """
    edges: [TokenAllowanceEdge!]!

    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TokenAllowanceEdge {
    """
    The cursor associated with this edge.
    """
    cursor: String!

    """
    The item associated with the edge.
    """
    node: TokenAllowance!
}

